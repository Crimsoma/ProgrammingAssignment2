cube <- function(x, n) {}
cube <- function(x, n) {x^3}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 3
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<- 3
z<- 4
f(3)
g(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
g(x)
f <- function(x){g<- function(y) {y+z}z<-4 x+g(x)}
f <- function(x){g<- function(y) {y+z}z<-4 x+g(x)}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
getwd()
getwd()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
debug(ls)
ls()
# Test your code
source("cachematrix.R")
#
# generate matrix, and the inverse of the matrix.
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
#
# now solve the matrix via the cache-method
#
special.matrix   <- makeCacheMatrix(mymatrix)
#
# this should take long, since it's the first go
special.solved.1 <- cacheSolve(special.matrix)
#
# this should be lightning fast
special.solved.2 <- cacheSolve(special.matrix)
#
# check if all solved matrices are identical
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
#
# should return TRUE
source("cachematrix.R")
}
source("cachematrix.R")
getwd()
setwd("C:/Users/Iota/Desktop/ProgrammingAssignment2")
source("cachematrix.R")
special.matrix <- makeCacheMatrix(mymatrix)
source("cachematrix.R")
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
list(set=set, get=get, setsolve = setsolve, getsolve=getsolve)
source("cachematrix.R")
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
?solve
